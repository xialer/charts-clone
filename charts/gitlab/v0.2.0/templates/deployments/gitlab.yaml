apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ template "gitlab.fullname" . }}-gitlab
  labels:
    app: {{ template "gitlab.name" . }}-gitlab
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  {{- if .Values.persistence.backup.enabled }}
  annotations:
    stash.appscode.com/backup-blueprint: {{ template "gitlab.fullname" . }}
    stash.appscode.com/target-paths: '/gitlab-data,/etc/gitlab'
    stash.appscode.com/volume-mounts: 'data:/gitlab-data,data:/etc/gitlab'
  {{- end }}
spec:
  strategy:
    type: {{ .Values.config.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "gitlab.name" . }}-gitlab
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ template "gitlab.fullname" . }}-gitlab
          image: {{ .Values.images.gitlab.repository }}:{{ .Values.images.gitlab.tag }}
          imagePullPolicy: {{ .Values.config.imagePullPolicy }}
          ports:
            - name: container
              containerPort: 80
          volumeMounts:
            - name: data
              mountPath: /gitlab-data
              subPath: data
            - name: data
              mountPath: /etc/gitlab
              subPath: etc
          env:
            - name: GITLAB_OMNIBUS_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: omnibus_config
            - name: EXTERNAL_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: base_url
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: postgres_host
            {{- if .Values.config.postgres.internal }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "gitlab.sharedname" . }}-postgres-auth
                  key: POSTGRES_USER
            {{- else }}
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: postgres_username
            {{- end }}
            - name: DB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: postgres_database
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: redis_host
            - name: GITLAB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: password
            {{- if .Values.config.postgres.internal }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "gitlab.sharedname" . }}-postgres-auth
                  key: POSTGRES_PASSWORD
            {{- else }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "gitlab.fullname" . }}
                  key: postgres_password
            {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.liveness | indent 12 }}
          readinessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.readiness | indent 12 }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "gitlab.fullname" . ) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
{{- if (and .Values.persistence.backup.enabled (not (empty .Values.persistence.backup.restore.gitlabSnapshot))) }}
{{- $restore := .Values.persistence.backup.restore }}
---
apiVersion: stash.appscode.com/v1alpha1
kind: Repository
metadata:
  name: {{ template "gitlab.fullname" . }}-restore-gitlab
  labels:
    app: {{ template "gitlab.name" . }}-restore-gitlab
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  backend:
    {{ .Values.persistence.backup.type }}:
      {{- if (or (eq "gcs" .Values.persistence.backup.type) (eq "s3" .Values.persistence.backup.type)) }}
      bucket: {{ .Values.persistence.backup.bucket | quote }}
      {{- end }}
      {{- if (eq "s3" .Values.persistence.backup.type) }}
      endpoint: {{ .Values.persistence.backup.endpoint | quote }}
      {{- end }}
      {{- if (eq "azure" .Values.persistence.backup.type) }}
      container: {{ .Values.persistence.backup.container | quote }}
      {{- end }}
      {{- $fullname := (empty $restore.fullname | ternary (include "gitlab.fullname" .) $restore.fullname) }}
      prefix: '{{ .Values.persistence.backup.prefix }}/${TARGET_NAMESPACE}/deployment/{{ $fullname }}-gitlab'
    storageSecretName: {{ template "gitlab.fullname" . }}-backup
---
apiVersion: stash.appscode.com/v1beta1
kind: RestoreSession
metadata:
  name: {{ template "gitlab.fullname" . }}-gitlab
  labels:
    app: {{ template "gitlab.name" . }}-gitlab
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  driver: Restic
  repository:
    name: {{ template "gitlab.fullname" . }}-restore-gitlab
  rules:
    - paths:
        - /gitlab-data
        - /etc/gitlab
      snapshots:
        - {{ $restore.gitlabSnapshot }}
  target:
    ref:
      apiVersion: apps/v1beta1
      kind: Deployment
      name: {{ template "gitlab.fullname" . }}-gitlab
    volumeMounts:
      - name: data
        mountPath: /gitlab-data
      - name: data
        mountPath: /etc/gitlab
{{- end }}
